VIDEO 3
> Aprender a crear una imagen
$ sudo su
$ sudo docker pull <name de la imagen>:<tag>
$ sudo docker pull mysql       > sirve para descargar una imagen de mysql desde el dockerhub
-------------------------------------------------------------------------------------------
> NOTE: vemos algunas estructuras de docker 
rodnalcy@rodnalcy:~$ cd /var/lib/docker
rodnalcy@rodnalcy:/var/lib/docker$ ls
ls: no se puede abrir el directorio '.': Permiso denegado
rodnalcy@rodnalcy:/var/lib/docker$ sudo ls
builder  buildkit  containers  image  network  overlay2  plugins  runtimes  swarm  tmp	trust  volumes
rodnalcy@rodnalcy:/var/lib/docker$ sudo su
root@rodnalcy:/var/lib/docker# cd image/
root@rodnalcy:/var/lib/docker/image# ls
overlay2
root@rodnalcy:/var/lib/docker/image# cd overlay2
root@rodnalcy:/var/lib/docker/image/overlay2# ls
distribution  imagedb  layerdb  repositories.json
-------------------------------------------------------------------------------------------
> TAG sirven para definir las versiones de una imagen del docker hub doc: https://hub.docker.com/_/mysql?tab=tags

$ docker pull --all-tags mysql               > descargar todas las versiones de Mysql desde el dockerhub
$ docker images                              > visualizar las imagenes descargas desde el dockerhub
$ docker images <nombre de la imagen>:<tag>  > filtra imagenes especificos
$ docker images --digests                    > permite visualiza la imagen con un HASH 'digest'
$ docker pull mysql@sha256:<hash>            > permite descargar la imagen con un HASH

$ docker run <nombre de la imagen>           > ejecutar una imagen y si no la tienes la descarga
$ docker run mongo
$ docker run -d mongo                        > ejecutar uno o multiples contenedores de mongo por detras
$ docker run -d --name rodnal mongo          > ejecutar un contenedor y asignarle un nombre
$ docker ps                                  > visualizar los contenedores en ejecucion
$ docker run --name xenial -it debian        > ejucutar un contenedor, asignarle nombre y abrir su terminl 
$ docker ps | grep mongo                     > visualizar los contenedores en ejecucion y especificos
$ docker ps -a                               > visualizar todos los contenedores 
$ docker ps --filter "name=rodnal"           > filtrar los contenedores de acuerdo al nombre

---------------------------------------------------------------------------------------------
Administrar los recurso para nuestros contenedores
$ docker run -d --cpus=1 mongo 
$ docker run -d --memory="200m" mongo
---------------------------------------------------------------------------------------------
> Crear una imagen desde un docker File
$ vim Dockerfile                            > creamos el file
~ FROM debian:jessie
~ RUN apt-get update
~ RUN apt-get install -y git
~ RUN apt-get install -y vim
~
:wq!   -> salir
$ docker build -t repositorionamedockerhub/imagen:tag .Dockerfile  > ejucutamos el file 
$ docker build -t rodnalcode/mydebian:1.0.0 .                      > los contenedores son efimeros
                                                                     cuando terminamos la ejecucion
                                                                     se borrara los archivos      
$ rm -r <name archio o carpeta>    > eliminar archivos 
$ vim Dockerfile  
~ FROM debian:jessie
~ RUN apt-get update && apt-get install -y \
    git \
    vim

$ vim Dockerfile

FROM debian:jessie
RUN apt-get update && apt-get install -y \
    git \
    vim
CMD ["echo","Hola RodNAlCode"]

$ docker build -t rodnalcode/mydebian:1.0.0 .
$ docker run rodnalcode/mydebian:1.0.0

$ vim foo
Hola Rodnal Code son la 10:39 en Lima
$ vim Dockerfile
    git \
    vim
COPY foo /tmp/foo
CMD ["cat","/tmp/foo"]
$ docker run rodnalcode/mydebian:1.0.2
$ docker run -ti rodnalcode/mydebian:1.0.2 bash

$ vim Dockerfile
$ docker build -t rodnalcode/mybusibox:1.0.0 .
$ docker run -ti busybox sh
$ docker run -ti rodnalcode/mybusibox:1.0.0 sh

COMANDOS BASICOS PARA DOCKER
$ docker --version
$ docker info
$ docker --help
$ docker search redis   -> buscar las imagenes desde docker hub
$ docker history mysql  -> historial de una imagen
$ docker inspect mysql  -> brinda la metadata de la imagen en formato JSON
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
VIDEO 4
VOLUMENES 
$ docker images 
$ docker volume ls                 -> listar volumenes
$ docker volume create volume01    -> crear volumenes
$ docker volume inspect volume01   -> inspeccionar la metadata en JSON de un volumen
$ docker volume rm volume01        -> Eliminar volumenes

$ docker images                    -> Listar imagenes
$ docker image rm -f 949db83b3134  -> Eliminar imagenes por ID

$ docker ps -a                        -> listar contenedores
$ docker container rm -f 53ff87b5415f -> eliminar un contenedor por ID
$ docker rm -f 53ff87b5415f           -> eliminar un contenedor por ID

$ docker volume create volume02 
$ docker run -d --name site02 -v volume02:/app nginx:latest  -> crear un contenedor desde el volumen
$ docker container inspect site22      -> inspeccionar el contenedor 

$ cd /var/lib/docker/volumes/volume02/_data    -> ir a la ruta del volumen 
$ ls -la                                       -> listamos 
$ docker exec -it site02 bash                  -> ejecutar el volumen y abrin el terminal
-------------------------------------------------------      
> editar un archivo    
root@dc0c3ba4ef0a:/app# pwd
/app
root@dc0c3ba4ef0a:/app# touch a
root@dc0c3ba4ef0a:/app# echo "Hola Rodnal" > a
root@dc0c3ba4ef0a:/app# cat a
Hola Rodnal
-------------------------------------------------------
> Comandos para iniciar o finalizar contenedores
$ docker container start nginx-test-01
$ docker container stop nginx-test-01
$ docker ps
-------------------------------------------------------
$ docker run -d --name=nginxv2 -v nginx-02:/usr/share/nginx/html:ro nginx:latest -> crear un contenedor de un
                                                                                    volumen de solo lectura
> REDES
$ docker run -d --name=site-01 -p 8080:80 nginx    > crear un contenedor y redireccionar al puerto 8080
$ curl http://localhost:8080                       > abrir el archivo
> Editamos el html en los contenedores
$ docker exec -ti site-01 bash
$ echo site01-rodnal > /usr/share/nginx/html/index.html
$ cat /usr/share/nginx/html/index.html
$ docker container inspect site-01                 > visualizar los puertos o la metadata 
                                                     de un contenedor
Crear una red 
$ docker network ls
$ docker network inspect bridge
$ docker network create mired
$ docker network rm mired

ELIMINAR TODOS LOS CONTENEDORES
$ docker ps -a -q
$ docker rm -f $(docker ps -a -q)

ELIMINAR TODAS LAS IMAGENES
$ docker images -q -a
$ docker rmi -f $(docker images -q -a)
--------------------------------------------------------------------------------------
https://hub.docker.com/_/mysql

$ docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=database -p 3309:3306 mysql























